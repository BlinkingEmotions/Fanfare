/*  ‚ìî-transla.cxx | on-to old ideas on power-control. */

int accept(int expected‚Çãtoken, struct translation‚Çãcontext * trans, struct language‚Çãcontext * ctxt)
{
   if (trans->primary‚Çãpiece.token == expected‚Çãtoken) { advance‚Çãthrough‚Çãtext(trans,ctxt); return 1; }
   return 0;
}

int expect(int expected‚Çãtoken, struct translation‚Çãcontext * trans, struct language‚Çãcontext * ctxt)
{
   if (accept(expected‚Çãtoken,trans,ctxt)) return 1; Diagnos("expect: unexpected symbol"); return 0;
}

void expression(struct translation‚Çãcontext * trans, struct language‚Çãcontext * ctxt)
{
   
}

void term(struct translation‚Çãcontext * trans, struct language‚Çãcontext * ctxt)
{
   
}

void factor(struct translation‚Çãcontext * trans, struct, language‚Çãcontext * ctxt)
{
   
}

void condition(struct translation‚Çãcontext * trans, struct language‚Çãcontext * ctxt)
{
   
}

void assignment(struct translation‚Çãcontext * trans, struct language‚Çãcontext * ctxt)
{
   guard‚Çãmatch(int lookahead‚Çãtoken, int expected‚Çãtoken,trans,ctxt);
   guard‚Çãmatch(int lookahead‚Çãtoken, int expected‚Çãtoken,trans,ctxt);
   expression(trans,ctxt);
   guard‚Çãmatch(int lookahead‚Çãtoken, int expected‚Çãtoken,trans,ctxt);
} /*  a‚Ä§ùò¨‚Ä§a 'parse‚Çãassignment‚Çãsuffix'. */

void statement(struct translation‚Çãcontext * trans, struct language‚Çãcontext * ctxt)
{
   
}

/*

factor <-- ID | CONST | '(' expression ')'
expressions <-- term ( ('+'|'-') term)*
term <-- factor ( ('*'|'/') factor )*
assignment <-- ID '=' expression ';'

 */
